# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_NBInstallPyLibSwig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_NBInstallPyLibSwig')
    _NBInstallPyLibSwig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NBInstallPyLibSwig', [dirname(__file__)])
        except ImportError:
            import _NBInstallPyLibSwig
            return _NBInstallPyLibSwig
        try:
            _mod = imp.load_module('_NBInstallPyLibSwig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _NBInstallPyLibSwig = swig_import_helper()
    del swig_import_helper
else:
    import _NBInstallPyLibSwig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

# try:
#     import NBPackage.builtins as __builtin__
# except ImportError:
#     import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:  # __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except Exception:  # __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class CNBCryptoPythonLib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNBCryptoPythonLib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNBCryptoPythonLib, name)
    __repr__ = _swig_repr
    if _newclass:
        SSVEncrypt = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_SSVEncrypt)
    else:
        SSVEncrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_SSVEncrypt
    if _newclass:
        SSVDecrypt = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_SSVDecrypt)
    else:
        SSVDecrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_SSVDecrypt
    if _newclass:
        LoadKeystore = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_LoadKeystore)
    else:
        LoadKeystore = _NBInstallPyLibSwig.CNBCryptoPythonLib_LoadKeystore
    if _newclass:
        ClearKeystore = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_ClearKeystore)
    else:
        ClearKeystore = _NBInstallPyLibSwig.CNBCryptoPythonLib_ClearKeystore
    if _newclass:
        KSEncrypt = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_KSEncrypt)
    else:
        KSEncrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_KSEncrypt
    if _newclass:
        KSDecrypt = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_KSDecrypt)
    else:
        KSDecrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_KSDecrypt
    if _newclass:
        Hash_Spooky = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_Hash_Spooky)
    else:
        Hash_Spooky = _NBInstallPyLibSwig.CNBCryptoPythonLib_Hash_Spooky
    if _newclass:
        Des3Decrypt = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_Des3Decrypt)
    else:
        Des3Decrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_Des3Decrypt
    if _newclass:
        LegacyPBEDecrypt = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyPBEDecrypt)
    else:
        LegacyPBEDecrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyPBEDecrypt
    if _newclass:
        LegacyZipAesDecrypt = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyZipAesDecrypt)
    else:
        LegacyZipAesDecrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyZipAesDecrypt
    if _newclass:
        LegacyZipAesEncrypt = staticmethod(_NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyZipAesEncrypt)
    else:
        LegacyZipAesEncrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyZipAesEncrypt

    def __init__(self):
        this = _NBInstallPyLibSwig.new_CNBCryptoPythonLib()
        try:
            self.this.append(this)
        except Exception:  # __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NBInstallPyLibSwig.delete_CNBCryptoPythonLib
    __del__ = lambda self: None
CNBCryptoPythonLib_swigregister = _NBInstallPyLibSwig.CNBCryptoPythonLib_swigregister
CNBCryptoPythonLib_swigregister(CNBCryptoPythonLib)

def CNBCryptoPythonLib_SSVEncrypt(plaintext):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_SSVEncrypt(plaintext)
CNBCryptoPythonLib_SSVEncrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_SSVEncrypt

def CNBCryptoPythonLib_SSVDecrypt(ciphertext):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_SSVDecrypt(ciphertext)
CNBCryptoPythonLib_SSVDecrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_SSVDecrypt

def CNBCryptoPythonLib_LoadKeystore(szMongoDB, szDBName):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_LoadKeystore(szMongoDB, szDBName)
CNBCryptoPythonLib_LoadKeystore = _NBInstallPyLibSwig.CNBCryptoPythonLib_LoadKeystore

def CNBCryptoPythonLib_ClearKeystore():
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_ClearKeystore()
CNBCryptoPythonLib_ClearKeystore = _NBInstallPyLibSwig.CNBCryptoPythonLib_ClearKeystore

def CNBCryptoPythonLib_KSEncrypt(*args):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_KSEncrypt(*args)
CNBCryptoPythonLib_KSEncrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_KSEncrypt

def CNBCryptoPythonLib_KSDecrypt(*args):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_KSDecrypt(*args)
CNBCryptoPythonLib_KSDecrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_KSDecrypt

def CNBCryptoPythonLib_Hash_Spooky(text):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_Hash_Spooky(text)
CNBCryptoPythonLib_Hash_Spooky = _NBInstallPyLibSwig.CNBCryptoPythonLib_Hash_Spooky

def CNBCryptoPythonLib_Des3Decrypt(ciphertext):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_Des3Decrypt(ciphertext)
CNBCryptoPythonLib_Des3Decrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_Des3Decrypt

def CNBCryptoPythonLib_LegacyPBEDecrypt(ciphertext, password):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyPBEDecrypt(ciphertext, password)
CNBCryptoPythonLib_LegacyPBEDecrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyPBEDecrypt

def CNBCryptoPythonLib_LegacyZipAesDecrypt(ciphertext):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyZipAesDecrypt(ciphertext)
CNBCryptoPythonLib_LegacyZipAesDecrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyZipAesDecrypt

def CNBCryptoPythonLib_LegacyZipAesEncrypt(plaintext):
    return _NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyZipAesEncrypt(plaintext)
CNBCryptoPythonLib_LegacyZipAesEncrypt = _NBInstallPyLibSwig.CNBCryptoPythonLib_LegacyZipAesEncrypt

class CNBParserPythonLib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNBParserPythonLib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNBParserPythonLib, name)
    __repr__ = _swig_repr
    if _newclass:
        GetDEStructure = staticmethod(_NBInstallPyLibSwig.CNBParserPythonLib_GetDEStructure)
    else:
        GetDEStructure = _NBInstallPyLibSwig.CNBParserPythonLib_GetDEStructure

    def __init__(self):
        this = _NBInstallPyLibSwig.new_CNBParserPythonLib()
        try:
            self.this.append(this)
        except Exception:  # __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NBInstallPyLibSwig.delete_CNBParserPythonLib
    __del__ = lambda self: None
CNBParserPythonLib_swigregister = _NBInstallPyLibSwig.CNBParserPythonLib_swigregister
CNBParserPythonLib_swigregister(CNBParserPythonLib)

def CNBParserPythonLib_GetDEStructure(parserStr):
    return _NBInstallPyLibSwig.CNBParserPythonLib_GetDEStructure(parserStr)
CNBParserPythonLib_GetDEStructure = _NBInstallPyLibSwig.CNBParserPythonLib_GetDEStructure

# This file is compatible with both classic and new-style classes.


